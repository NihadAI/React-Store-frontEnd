{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import { toast } from \"react-toastify\";\n// const initialState = {\n//   cartItems: localStorage.getItem(\"cartItems\")\n//     ? JSON.parse(localStorage.getItem(\"cartItems\"))\n//     : [],\n//   cartTotalQuantity: 0,\n//   cartTotalAmount: 0,\n// };\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialState,\n//   reducers: {\n//     addToCart(state, action) {\n//       const existingIndex = state.cartItems.findIndex(\n//         (item) => item.id === action.payload.id\n//       );\n//       if (existingIndex >= 0) {\n//         state.cartItems[existingIndex] = {\n//           ...state.cartItems[existingIndex],\n//           cartQuantity: state.cartItems[existingIndex].cartQuantity + 1,\n//         };\n//         toast.info(\"Increased product quantity\", {\n//           position: \"bottom-left\",\n//         });\n//       } else {\n//         let tempProductItem = { ...action.payload, cartQuantity: 1 };\n//         state.cartItems.push(tempProductItem);\n//         toast.success(\"Product added to cart\", {\n//           position: \"bottom-left\",\n//         });\n//       }\n//       localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     },\n//     decreaseCart(state, action) {\n//       const itemIndex = state.cartItems.findIndex(\n//         (item) => item.id === action.payload.id\n//       );\n//       if (state.cartItems[itemIndex].cartQuantity > 1) {\n//         state.cartItems[itemIndex].cartQuantity -= 1;\n//         toast.info(\"Decreased product quantity\", {\n//           position: \"bottom-left\",\n//         });\n//       } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n//         const nextCartItems = state.cartItems.filter(\n//           (item) => item.id !== action.payload.id\n//         );\n//         state.cartItems = nextCartItems;\n//         toast.error(\"Product removed from cart\", {\n//           position: \"bottom-left\",\n//         });\n//       }\n//       localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     },\n//     removeFromCart(state, action) {\n//       state.cartItems.map((cartItem) => {\n//         if (cartItem.id === action.payload.id) {\n//           const nextCartItems = state.cartItems.filter(\n//             (item) => item.id !== cartItem.id\n//           );\n//           state.cartItems = nextCartItems;\n//           toast.error(\"Product removed from cart\", {\n//             position: \"bottom-left\",\n//           });\n//         }\n//         localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//         return state;\n//       });\n//     },\n//     getTotals(state, action) {\n//       let { total, quantity } = state.cartItems.reduce(\n//         (cartTotal, cartItem) => {\n//           const { price, cartQuantity } = cartItem;\n//           const itemTotal = price * cartQuantity;\n//           cartTotal.total += itemTotal;\n//           cartTotal.quantity += cartQuantity;\n//           return cartTotal;\n//         },\n//         {\n//           total: 0,\n//           quantity: 0,\n//         }\n//       );\n//       total = parseFloat(total.toFixed(2));\n//       state.cartTotalQuantity = quantity;\n//       state.cartTotalAmount = total;\n//     },\n//     // clearCart(state, action) {\n//     //   state.cartItems = [];\n//     //   localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     //   toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n//     // },\n//     clearCart(state, action) {\n//       state.cartItems = [];\n//       state.cartTotalQuantity = 0;\n//       state.cartTotalAmount = 0;\n//     },    \n//   },\n// });\n// export const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n//   cartSlice.actions;\n// export default cartSlice.reducer;","map":{"version":3,"sources":["/Users/mbp15inch/Desktop/complete-shopping-cart-main/front/src/slices/cartSlice.js"],"names":[],"mappingssourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\n// import { toast } from \"react-toastify\";\n\n// const initialState = {\n//   cartItems: localStorage.getItem(\"cartItems\")\n//     ? JSON.parse(localStorage.getItem(\"cartItems\"))\n//     : [],\n//   cartTotalQuantity: 0,\n//   cartTotalAmount: 0,\n// };\n\n// const cartSlice = createSlice({\n//   name: \"cart\",\n//   initialState,\n//   reducers: {\n//     addToCart(state, action) {\n//       const existingIndex = state.cartItems.findIndex(\n//         (item) => item.id === action.payload.id\n//       );\n\n//       if (existingIndex >= 0) {\n//         state.cartItems[existingIndex] = {\n//           ...state.cartItems[existingIndex],\n//           cartQuantity: state.cartItems[existingIndex].cartQuantity + 1,\n//         };\n//         toast.info(\"Increased product quantity\", {\n//           position: \"bottom-left\",\n//         });\n//       } else {\n//         let tempProductItem = { ...action.payload, cartQuantity: 1 };\n//         state.cartItems.push(tempProductItem);\n//         toast.success(\"Product added to cart\", {\n//           position: \"bottom-left\",\n//         });\n//       }\n//       localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     },\n//     decreaseCart(state, action) {\n//       const itemIndex = state.cartItems.findIndex(\n//         (item) => item.id === action.payload.id\n//       );\n\n//       if (state.cartItems[itemIndex].cartQuantity > 1) {\n//         state.cartItems[itemIndex].cartQuantity -= 1;\n\n//         toast.info(\"Decreased product quantity\", {\n//           position: \"bottom-left\",\n//         });\n//       } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n//         const nextCartItems = state.cartItems.filter(\n//           (item) => item.id !== action.payload.id\n//         );\n\n//         state.cartItems = nextCartItems;\n\n//         toast.error(\"Product removed from cart\", {\n//           position: \"bottom-left\",\n//         });\n//       }\n\n//       localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     },\n//     removeFromCart(state, action) {\n//       state.cartItems.map((cartItem) => {\n//         if (cartItem.id === action.payload.id) {\n//           const nextCartItems = state.cartItems.filter(\n//             (item) => item.id !== cartItem.id\n//           );\n\n//           state.cartItems = nextCartItems;\n\n//           toast.error(\"Product removed from cart\", {\n//             position: \"bottom-left\",\n//           });\n//         }\n//         localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//         return state;\n//       });\n//     },\n//     getTotals(state, action) {\n//       let { total, quantity } = state.cartItems.reduce(\n//         (cartTotal, cartItem) => {\n//           const { price, cartQuantity } = cartItem;\n//           const itemTotal = price * cartQuantity;\n\n//           cartTotal.total += itemTotal;\n//           cartTotal.quantity += cartQuantity;\n\n//           return cartTotal;\n//         },\n//         {\n//           total: 0,\n//           quantity: 0,\n//         }\n//       );\n//       total = parseFloat(total.toFixed(2));\n//       state.cartTotalQuantity = quantity;\n//       state.cartTotalAmount = total;\n//     },\n//     // clearCart(state, action) {\n//     //   state.cartItems = [];\n//     //   localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n//     //   toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n//     // },\n//     clearCart(state, action) {\n//       state.cartItems = [];\n//       state.cartTotalQuantity = 0;\n//       state.cartTotalAmount = 0;\n//     },    \n//   },\n// });\n\n// export const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n//   cartSlice.actions;\n\n// export default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}