{"ast":null,"code":"import { createSlice, combineReducers } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nconst favoritesSlice = createSlice({\n  name: \"favorites\",\n  initialState: {\n    items: []\n  },\n  reducers: {\n    addToFavorites(state, action) {\n      const tempProductItem = { ...action.payload,\n        cartQuantity: 1\n      };\n      state.items.push(tempProductItem);\n      toast.success(\"Product added to favorites\", {\n        position: \"bottom-left\"\n      });\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    },\n\n    decreaseFavorites(state, action) {\n      const itemIndex = state.items.findIndex(item => item.id === action.payload.id);\n\n      if (state.items[itemIndex].cartQuantity > 1) {\n        state.items[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else if (state.items[itemIndex].cartQuantity === 1) {\n        state.items = state.items.filter(item => item.id !== action.payload.id);\n        toast.error(\"Product removed from favorites\", {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    },\n\n    removeFromFavorites(state, action) {\n      state.items = state.items.filter(item => item.id !== action.payload.id);\n      toast.error(\"Product removed from favorites\", {\n        position: \"bottom-left\"\n      });\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    }\n\n  }\n});\nexport const {\n  addToFavorites,\n  decreaseFavorites,\n  removeFromFavorites\n} = favoritesSlice.actions;\nconst rootReducer = combineReducers({\n  favorites: favoritesSlice.reducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/mbp15inch/Desktop/complete-shopping-cart-main/front/src/slices/favoritesSlice.js"],"names":["createSlice","combineReducers","toast","favoritesSlice","name","initialState","items","reducers","addToFavorites","state","action","tempProductItem","payload","cartQuantity","push","success","position","localStorage","setItem","JSON","stringify","decreaseFavorites","itemIndex","findIndex","item","id","info","filter","error","removeFromFavorites","actions","rootReducer","favorites","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,kBAA7C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AAEA,MAAMC,cAAc,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFmB;AAKjCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,eAAe,GAAG,EAAE,GAAGD,MAAM,CAACE,OAAZ;AAAqBC,QAAAA,YAAY,EAAE;AAAnC,OAAxB;AACAJ,MAAAA,KAAK,CAACH,KAAN,CAAYQ,IAAZ,CAAiBH,eAAjB;AACAT,MAAAA,KAAK,CAACa,OAAN,CAAc,4BAAd,EAA4C;AAC1CC,QAAAA,QAAQ,EAAE;AADgC,OAA5C;AAGAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeX,KAAK,CAACH,KAArB,CAAlC;AACD,KARO;;AASRe,IAAAA,iBAAiB,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AAC/B,YAAMY,SAAS,GAAGb,KAAK,CAACH,KAAN,CAAYiB,SAAZ,CACfC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACE,OAAP,CAAea,EADrB,CAAlB;;AAGA,UAAIhB,KAAK,CAACH,KAAN,CAAYgB,SAAZ,EAAuBT,YAAvB,GAAsC,CAA1C,EAA6C;AAC3CJ,QAAAA,KAAK,CAACH,KAAN,CAAYgB,SAAZ,EAAuBT,YAAvB,IAAuC,CAAvC;AACAX,QAAAA,KAAK,CAACwB,IAAN,CAAW,4BAAX,EAAyC;AACvCV,UAAAA,QAAQ,EAAE;AAD6B,SAAzC;AAGD,OALD,MAKO,IAAIP,KAAK,CAACH,KAAN,CAAYgB,SAAZ,EAAuBT,YAAvB,KAAwC,CAA5C,EAA+C;AACpDJ,QAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYqB,MAAZ,CACXH,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACE,OAAP,CAAea,EADzB,CAAd;AAGAvB,QAAAA,KAAK,CAAC0B,KAAN,CAAY,gCAAZ,EAA8C;AAC5CZ,UAAAA,QAAQ,EAAE;AADkC,SAA9C;AAGD;;AACDC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeX,KAAK,CAACH,KAArB,CAAlC;AACD,KA3BO;;AA4BRuB,IAAAA,mBAAmB,CAACpB,KAAD,EAAQC,MAAR,EAAgB;AACjCD,MAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYqB,MAAZ,CACXH,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACE,OAAP,CAAea,EADzB,CAAd;AAGAvB,MAAAA,KAAK,CAAC0B,KAAN,CAAY,gCAAZ,EAA8C;AAC5CZ,QAAAA,QAAQ,EAAE;AADkC,OAA9C;AAGAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeX,KAAK,CAACH,KAArB,CAAlC;AACD;;AApCO;AALuB,CAAD,CAAlC;AA6CA,OAAO,MAAM;AAAEE,EAAAA,cAAF;AAAkBa,EAAAA,iBAAlB;AAAqCQ,EAAAA;AAArC,IACX1B,cAAc,CAAC2B,OADV;AAGP,MAAMC,WAAW,GAAG9B,eAAe,CAAC;AAClC+B,EAAAA,SAAS,EAAE7B,cAAc,CAAC8B;AADQ,CAAD,CAAnC;AAIA,eAAeF,WAAf","sourcesContent":["import { createSlice, combineReducers } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst favoritesSlice = createSlice({\n  name: \"favorites\",\n  initialState: {\n    items: [],\n  },\n  reducers: {\n    addToFavorites(state, action) {\n      const tempProductItem = { ...action.payload, cartQuantity: 1 };\n      state.items.push(tempProductItem);\n      toast.success(\"Product added to favorites\", {\n        position: \"bottom-left\",\n      });\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    },\n    decreaseFavorites(state, action) {\n      const itemIndex = state.items.findIndex(\n        (item) => item.id === action.payload.id\n      );\n      if (state.items[itemIndex].cartQuantity > 1) {\n        state.items[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\",\n        });\n      } else if (state.items[itemIndex].cartQuantity === 1) {\n        state.items = state.items.filter(\n          (item) => item.id !== action.payload.id\n        );\n        toast.error(\"Product removed from favorites\", {\n          position: \"bottom-left\",\n        });\n      }\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    },\n    removeFromFavorites(state, action) {\n      state.items = state.items.filter(\n        (item) => item.id !== action.payload.id\n      );\n      toast.error(\"Product removed from favorites\", {\n        position: \"bottom-left\",\n      });\n      localStorage.setItem(\"favorites\", JSON.stringify(state.items));\n    },\n  },\n});\n\nexport const { addToFavorites, decreaseFavorites, removeFromFavorites } =\n  favoritesSlice.actions;\n\nconst rootReducer = combineReducers({\n  favorites: favoritesSlice.reducer,\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}